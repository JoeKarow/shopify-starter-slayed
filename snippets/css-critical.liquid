{%- comment -%}
  Critical CSS Loader

  Loads critical CSS inline for optimal performance.
  Generated by the PostCSS directive splitter from @critical blocks.

  Usage:
    {% render 'css-critical' %}

  Template-specific critical CSS:
    {% render 'css-critical', template: 'product' %}
{%- endcomment -%}

{%- liquid
  assign template_name = template.name | default: 'global'

  if template != blank
    assign template_name = template
  endif

  assign critical_file = 'critical-' | append: template_name | append: '.css'
  assign fallback_critical = 'critical-global.css'
-%}

{%- comment -%} Try to load template-specific critical CSS first {%- endcomment -%}
{%- capture critical_css -%}
  {%- unless template_name == 'global' -%}
    {{ critical_file | asset_url | split: '?' | first | asset_content }}
  {%- endunless -%}
{%- endcapture -%}

{%- comment -%} Fallback to global critical CSS if template-specific doesn't exist {%- endcomment -%}
{%- if critical_css == blank -%}
  {%- capture critical_css -%}
    {{ fallback_critical | asset_url | split: '?' | first | asset_content }}
  {%- endcapture -%}
{%- endif -%}

{%- comment -%} Output critical CSS inline for zero render-blocking delay {%- endcomment -%}
{%- if critical_css != blank -%}
  <style id="critical-css-{{ template_name }}">{{ critical_css }}</style>
{%- endif -%}

{%- comment -%} Preload the main stylesheet asynchronously {%- endcomment -%}
{%- unless template_name == 'global' -%}
  {%- assign main_css = 'theme-' | append: template_name | append: '.css' -%}
  <link rel="preload" href="{{ main_css | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'" crossorigin>
  <noscript><link rel="stylesheet" href="{{ main_css | asset_url }}"></noscript>
{%- endunless -%}